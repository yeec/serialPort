<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
<!-- scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
　　　　scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
　　　　debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

	<!--application.yml 传递参数，不能使用logback 自带的<property>标签 -->
    <springProperty scope="context" name="appname" source="logback.appname"/>
    <springProperty scope="context" name="logdir" source="logback.logdir"/>
    <springProperty scope="context" name="filesize" source="logback.filesize"/>
    <springProperty scope="context" name="fileLevel" source="logback.fileLevel"/>
    <springProperty scope="context" name="consoleLevel" source="logback.consoleLevel"/>
    <springProperty scope="context" name="rootLevel" source="logback.rootLevel"/>
    
    <contextName>${appname}</contextName>
    
	<appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <!-- 完整日志文件 -->
	    <filter class="ch.qos.logback.classic.filter.LevelFilter">
	       <!--  过滤 Error 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，所以我们使用下面的策略，可以避免输出 Error 的日志
	        <level>ERROR</level>
	        	匹配到就禁止
	        <onMatch>DENY</onMatch>
	        	没有匹配到就允许
	        <onMismatch>ACCEPT</onMismatch> -->
	        <level>${fileLevel}</level>
	    </filter>
	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	                        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	                        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <!-- <File>${logdir}/${date}/info.${appname}.log</File> -->
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
	        <!--文件路径,定义了日志的切分方式——每个文件大小${filesize}，超过大小重新建一个文件，日志文件放到当前日期的文件夹下-->
	        <FileNamePattern>${logdir}/%d{yyyy-MM-dd}/${appname}.%d{HHmmss.SSS}.%i.log</FileNamePattern>
	        <!--只保留最近90天的日志-->
	        <maxHistory>90</maxHistory>
	        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	        <!--<totalSizeCap>1GB</totalSizeCap>-->
	        <!-- 最大64MB 超过最大值，会重新建一个文件-->
	        <maxFileSize>${filesize}</maxFileSize>
	    </rollingPolicy>
	    <!--日志输出编码格式化-->
	    <encoder>
	        <charset>UTF-8</charset>
	        <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
	    </encoder>
	</appender>

	<!-- error级别日志文件 -->
	<appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
	    <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
	    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
	        <level>Error</level>
	    </filter>
	    <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
	        如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
	        的日志改名为今天的日期。即，<File> 的日志都是当天的。
	    -->
	    <!-- <File>${logdir}/${date}/error.${appname}.log</File> -->
	    <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
	    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
	        <!--文件路径,定义了日志的切分方式——每个文件大小${filesize}，超过大小重新建一个文件，日志文件放到当前日期的文件夹下-->
	        <FileNamePattern>${logdir}/%d{yyyy-MM-dd}/error.${appname}.%d{HHmmss.SSS}.%i.log</FileNamePattern>
	        <!--只保留最近90天的日志-->
	        <maxHistory>90</maxHistory>
	        <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
	        <!--<totalSizeCap>1GB</totalSizeCap>-->
	        <!-- 最大64MB 超过最大值，会重新建一个文件-->
	        <maxFileSize>${filesize}</maxFileSize>
	    </rollingPolicy>
	    <!--日志输出编码格式化-->
	    <encoder>
	        <charset>UTF-8</charset>
	        <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
	    </encoder>
	</appender>
	
    <!--输出到控制台 ConsoleAppender-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
        <!--展示格式 layout-->
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>
                <pattern>%d{HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </pattern>
        </layout>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>${consoleLevel}</level>
        </filter>
    </appender>
    
    <!-- 以下配置可以指定包名打印日志文件 -->
    <!-- <logger name="io.renren" level="${fileLevel}">  
        <appender-ref ref="fileErrorLog" />
        <appender-ref ref="fileInfoLog" />
    </logger> -->
    

    <!--指定最基础的日志输出级别-->
    <root level="${rootLevel}">
        <!--appender将会添加到这个loger-->
        <appender-ref ref="consoleLog"/>
        <appender-ref ref="fileErrorLog" />
        <appender-ref ref="fileInfoLog" />
    </root>
</configuration>